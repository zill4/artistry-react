"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const React = require("react");
const ArtistryReact_1 = require("modules/ArtistryReact");
class ButtonView extends React.Component {
    constructor(props) {
        super(props);
        this.lockButton = () => {
            this.setState({ locked: true });
            window.setTimeout(() => {
                this.setState({ locked: false });
            }, 1000);
        };
        this.openPopover = () => {
            this.setState({ popoverOpen: true });
        };
        this.closePopover = () => {
            this.setState({ popoverOpen: false });
        };
        this.state = {
            locked: false,
            popoverOpen: false
        };
    }
    render() {
        return (React.createElement(React.Fragment, null,
            React.createElement(ArtistryReact_1.Section, { header: "Buttons", headerSpace: true, className: "explode" },
                React.createElement(ArtistryReact_1.Scrollable, null,
                    React.createElement("table", { className: "table" },
                        React.createElement("thead", null,
                            React.createElement("tr", null,
                                React.createElement("th", null, "Type"),
                                React.createElement("th", null, "Standard"),
                                React.createElement("th", null, "Disabled"),
                                React.createElement("th", null, "Primary"),
                                React.createElement("th", null, "Disabled"),
                                React.createElement("th", null, "Danger"),
                                React.createElement("th", null, "Disabled"))),
                        React.createElement("tbody", null,
                            React.createElement("tr", null,
                                React.createElement("th", null, "Standard"),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, null, "Edit")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { disabled: true }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { theme: "primary" }, "Save")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { theme: "primary", disabled: true }, "Save")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { theme: "danger" }, "Delete")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { theme: "danger", disabled: true }, "Delete"))),
                            React.createElement("tr", null,
                                React.createElement("th", null, "Text"),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "textonly" }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "textonly", disabled: true }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "textonly", theme: "primary" }, "Save")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "textonly", theme: "primary", disabled: true }, "Save")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "textonly", theme: "danger" }, "Delete")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "textonly", theme: "danger", disabled: true }, "Delete"))),
                            React.createElement("tr", null,
                                React.createElement("th", null, "Outline"),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "outline" }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "outline", disabled: true }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "outline", theme: "primary" }, "Save")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "outline", theme: "primary", disabled: true }, "Save")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "outline", theme: "danger" }, "Delete")),
                                React.createElement("td", null,
                                    React.createElement(ArtistryReact_1.Button, { display: "outline", theme: "danger", disabled: true }, "Delete"))),
                            React.createElement("tr", null,
                                React.createElement("th", null, "Underline"),
                                React.createElement("td", null,
                                    React.createElement("button", { className: "button button-underline" }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement("button", { className: "button button-underline", disabled: true }, "Edit")),
                                React.createElement("td", null,
                                    React.createElement("button", { className: "button button-underline button-primary" }, "Save")),
                                React.createElement("td", null,
                                    React.createElement("button", { className: "button button-underline button-primary", disabled: true }, "Save")),
                                React.createElement("td", null,
                                    React.createElement("button", { className: "button button-underline button-danger" }, "Delete")),
                                React.createElement("td", null,
                                    React.createElement("button", { className: "button button-underline button-danger", disabled: true }, "Delete")))))),
                React.createElement(ArtistryReact_1.Divider, null),
                React.createElement("div", { className: "space" },
                    React.createElement("h3", null, "Sizes"),
                    React.createElement("div", { className: "align-center" },
                        React.createElement(ArtistryReact_1.Button, { displaySize: "small" }, "Small"),
                        ' ',
                        React.createElement(ArtistryReact_1.Button, null, "Medium"),
                        ' ',
                        React.createElement(ArtistryReact_1.Button, { displaySize: "large" }, "Large"))),
                React.createElement(ArtistryReact_1.Divider, null),
                React.createElement("div", { className: "space" },
                    React.createElement("h3", null, "Lockable Buttons"),
                    React.createElement(ArtistryReact_1.ActionBar, { align: "center" },
                        React.createElement(ArtistryReact_1.Button, { lockContent: "Locked", locked: this.state.locked, onClick: this.lockButton }, "Lockable Edit"),
                        React.createElement(ArtistryReact_1.Button, { lockContent: "Locked", locked: this.state.locked, onClick: this.lockButton, theme: "primary" }, "Lockable Save"),
                        React.createElement(ArtistryReact_1.Button, { lockContent: "Locked", locked: this.state.locked, onClick: this.lockButton, theme: "danger" }, "Lockable Delete")))),
            React.createElement(ArtistryReact_1.Section, { header: "Button Group", space: true, headerSpace: true },
                React.createElement("h3", null, "Button Group"),
                React.createElement("div", { className: "align-center" },
                    React.createElement("p", null,
                        React.createElement(ArtistryReact_1.ButtonGroup, null,
                            React.createElement(ArtistryReact_1.Button, null, "View"),
                            React.createElement(ArtistryReact_1.Button, { theme: "primary", popover: "Popover", popoverAlign: "left", popoverSpace: true }, "Edit"),
                            React.createElement(ArtistryReact_1.Button, { theme: "danger" }, "Delete"))),
                    React.createElement("p", null,
                        React.createElement(ArtistryReact_1.ButtonGroup, null,
                            React.createElement(ArtistryReact_1.Button, { display: "textonly" }, "View"),
                            React.createElement(ArtistryReact_1.Button, { display: "textonly", theme: "primary" }, "Edit"),
                            React.createElement(ArtistryReact_1.Button, { display: "textonly", theme: "danger" }, "Delete"))),
                    React.createElement("p", null,
                        React.createElement(ArtistryReact_1.ButtonGroup, null,
                            React.createElement(ArtistryReact_1.Button, { display: "outline" }, "View"),
                            React.createElement(ArtistryReact_1.Button, { display: "outline", theme: "primary" }, "Edit"),
                            React.createElement(ArtistryReact_1.Button, { display: "outline", theme: "danger" }, "Delete")))),
                React.createElement("h3", null, "Button Bar"),
                React.createElement("div", { className: "align-center" },
                    React.createElement(ArtistryReact_1.ButtonBar, null,
                        React.createElement(ArtistryReact_1.Button, null, "View"),
                        React.createElement(ArtistryReact_1.Button, { theme: "primary", popover: "Popover", popoverAlign: "left", popoverSpace: true }, "Edit"),
                        React.createElement(ArtistryReact_1.Button, { theme: "danger" }, "Delete"))),
                React.createElement("h3", null, "Action Bar"),
                React.createElement("div", { className: "align-center" },
                    React.createElement(ArtistryReact_1.ActionBar, null,
                        React.createElement(ArtistryReact_1.Button, null, "View"),
                        React.createElement(ArtistryReact_1.Button, { theme: "primary", popover: "Popover", popoverAlign: "left", popoverSpace: true }, "Edit"),
                        React.createElement(ArtistryReact_1.Button, { theme: "danger" }, "Delete"))),
                React.createElement("h3", null, "Tooltip"),
                React.createElement("div", { className: "align-center" },
                    React.createElement(ArtistryReact_1.Button, { tooltip: "Information...", tooltipDirection: "right" }, "Tooltip")),
                React.createElement("h3", null, "Popover"),
                React.createElement("div", { className: "align-center" },
                    React.createElement(ArtistryReact_1.Button, { popover: React.createElement("span", null,
                            React.createElement("strong", null, "Popover"),
                            " Text"), popoverDirection: "right", popoverSpace: true }, "Popover")),
                React.createElement("h3", null, "Popover Menu"),
                React.createElement("div", { className: "align-center" },
                    React.createElement(ArtistryReact_1.Button, { popover: React.createElement("span", null,
                            React.createElement("strong", null, "Popover"),
                            " Text"), popoverDirection: "right", popoverMenu: true, popoverSpace: true, popoverOpen: this.state.popoverOpen, onPopoverClose: this.closePopover, onClick: this.openPopover }, "Popover Menu")),
                React.createElement("h3", null, "Action Bar Breadcrumbs"),
                React.createElement("div", { className: "explode-width" },
                    React.createElement(ArtistryReact_1.ActionBarBreadcrumb, null,
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"),
                        React.createElement(ArtistryReact_1.Button, { display: "underline" }, "Home"))))));
    }
}
exports.default = ButtonView;
//# sourceMappingURL=ButtonView.js.map